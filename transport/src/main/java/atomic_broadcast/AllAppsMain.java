/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package atomic_broadcast;

import atomic_broadcast.consensus.ConsensusEventListener;
import atomic_broadcast.host.Host;
import atomic_broadcast.sequencer.*;
import atomic_broadcast.utils.ConnectAs;
import atomic_broadcast.utils.ConnectUsing;
import atomic_broadcast.utils.Pollable;
import atomic_broadcast.utils.TransportParams;
import com.epam.deltix.gflog.api.Log;
import com.epam.deltix.gflog.api.LogFactory;
import io.aeron.ChannelUriStringBuilder;
import io.aeron.CommonContext;
import time.Clock;
import time.RealClock;

import static atomic_broadcast.aeron.AeronModule.COMMAND_ENDPOINT;
import static atomic_broadcast.utils.TransportState.PollCommandStream;
import static atomic_broadcast.utils.TransportState.PollEventStream;

public class AllAppsMain {

    private static final Log log = LogFactory.getLog(AllAppsMain.class.getName());

    public static void main(String[] args) {
        try {
            TransportParams clientParams = new TransportParams();
            clientParams
                    .connectAs(ConnectAs.Client)
                    .connectUsing(ConnectUsing.Unicast)
                    .addPublicationChannel(new ChannelUriStringBuilder()
                    .media(CommonContext.UDP_MEDIA)
                    .endpoint(COMMAND_ENDPOINT)
                    .build());

            TransportParams sequencerParams = new TransportParams();
            sequencerParams
                    .connectAs(ConnectAs.Sequencer)
                    .connectUsing(ConnectUsing.Unicast)
                    .addListener(new SequencerCommandHandler())
                    .instance(1);

            TransportParams consensusParams = new TransportParams();
            consensusParams
                    .connectAs(ConnectAs.ClusterClient)
                    .connectUsing(ConnectUsing.Unicast)
                    .instance(1);

            Host host = new Host(1);

            host
                .deployMediaDriver()
                .deploySequencer(sequencerParams, consensusParams)
                .deployClient(clientParams, packet -> {})
                .start();

            while (host.sequencer().state() != PollCommandStream) {
                host.pollables().forEach(Pollable::poll);
            }

            while(host.eventbus().state() != PollEventStream) {
                host.pollables().forEach(Pollable::poll);
            }

            host.modules().close();
        } catch (Exception e) {
           log.error().append("error in AllAppsMain: ").appendLast(e);
        }
    }
}
